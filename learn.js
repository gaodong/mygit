// Generated by CoffeeScript 1.7.1
(function() {
  var array, array1, array2, big, callback, cat, cube, dontTryThisAtHome, e, elementName, father, first, gordon, greeting, i, isInteger, isOk, key, name, obj, odd, others, person, pig, run, scorce, setName, singCountDown, sss, symbols, team, teamer, tt, val, _i, _j, _k, _ref,
    __slice = [].slice;

  run = function() {
    return "Hello, Coffescript!";
  };

  console.log(run());

  console.log(run());

  console.log((function() {
    return "Hello, Coffescript!";
  })());

  greeting = function() {
    return "Hello, " + arguments[0] + "!";
  };

  console.log(greeting());

  console.log(greeting("Coffee"));

  cube = function(num) {
    return Math.pow(num, 3);
  };

  console.log(cube(2));

  odd = function(num) {
    return num % 2 === 1;
  };

  for (i = _i = 0; _i < 10; i = ++_i) {
    console.log(("" + i + " is odd : ") + odd(i));
  }

  isInteger = function(num) {
    if (typeof num !== 'number') {
      throw "The arguments of " + num + " is not a Number";
    }
    if (num !== Math.round(num)) {
      throw "The argument of " + num + " is not a Integer";
    }
    return true;
  };

  console.log(isInteger(5));

  console.log(isInteger(32));

  try {
    console.log(isInteger("ddd"));
  } catch (_error) {
    e = _error;
    console.log("executing error : " + e);
  }

  singCountDown = function(count) {
    var singBottleCount, singDecrement;
    singBottleCount = function(specifyLocation) {
      var bottleStr, locationStr;
      locationStr = specifyLocation ? "on the wall" : "";
      bottleStr = count === 1 ? 'bottle' : 'bottles';
      return console.log("" + count + " " + bottleStr + " of beer " + locationStr);
    };
    singDecrement = function() {
      console.log("Take one down, pass it around");
      return count--;
    };
    singBottleCount(true);
    singBottleCount(false);
    singDecrement();
    singBottleCount(true);
    if (count !== 0) {
      return singCountDown(count);
    }
  };

  setName = function(name) {
    return this.name = name;
  };

  cat = {};

  cat.setName = setName;

  cat.setName("gordon");

  console.log(cat.name);

  pig = {};

  setName.apply(pig, ['zbj']);

  console.log(pig.name);

  setName.call(pig, "swk");

  console.log(pig.name);

  callback = (function(_this) {
    return function(message) {
      return _this.voiceMail.push(message);
    };
  })(this);

  this.voiceMail = [];

  big = {};

  big.callback = callback;

  big.voiceMail = [];

  big.callback('haha');

  console.log(big.voiceMail);

  console.log(this.voiceMail);

  setName = function(name) {
    return this.name = name;
  };

  setName = function(name) {
    this.name = name;
  };

  isOk = function(val) {
    if (val == null) {
      val = true;
    }
    return val;
  };

  console.log(typeof person !== "undefined" && person !== null ? person.say() : void 0);

  person = {
    say: function() {
      return "hello";
    }
  };

  console.log(person != null ? person.say() : void 0);

  console.log(typeof person.said === "function" ? person.said() : void 0);

  dontTryThisAtHome = function(noArgNoProblem) {
    if (noArgNoProblem == null) {
      noArgNoProblem = this.iHopeThisWorks();
    }
  };

  dontTryThisAtHome = function(noArgNoProblem) {
    return noArgNoProblem != null ? noArgNoProblem : noArgNoProblem = this.iHopeThisWorks();
  };

  team = function() {
    var caption, others;
    caption = arguments[0], others = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    console.log("The caption of Team is '" + caption + "'");
    return console.log("The others of Team are '" + (others.join(', ')) + "'");
  };

  sss = ['a', 'b', 'c', 'd'];

  scorce = function() {
    var first, last, others, _j;
    others = 3 <= arguments.length ? __slice.call(arguments, 0, _j = arguments.length - 2) : (_j = 0, []), first = arguments[_j++], last = arguments[_j++];
    console.log("The first of team is '" + first + "'");
    console.log("The others of team are '" + (others.join(", ")) + "'");
    return console.log("The last one is '" + last + "'");
  };

  obj = {};

  scorce.apply(null, sss);

  first = sss[0], others = 2 <= sss.length ? __slice.call(sss, 1) : [];

  console.log(first);

  console.log(others.join(', '));

  console.log(sss, 4);

  console.log.apply(console, __slice.call(sss).concat([4]));

  array = __slice.call(sss).concat([4]);

  run = function() {
    var data, func;
    func = arguments[0], data = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    return func.apply.apply(func, [this].concat(__slice.call(data)));
  };

  obj = new Object();

  obj = {};

  obj['+'] = 'plus';

  elementName = 'name';

  obj[elementName] = 'plus';

  father = {
    name: 'John',
    daughter: {
      name: 'Jill'
    },
    son: {
      name: 'Jack'
    }
  };

  symbols = {
    '+': 'plus',
    '-': 'minus'
  };

  father = {
    name: 'John',
    age: 32,
    daughter: {
      name: 'lili',
      age: 17
    }
  };

  gordon = {
    name: 'gordon',
    age: 30,
    addr: {
      post: 200000,
      road: 'halei'
    }
  };

  name = "gordon";

  person = {
    name: name
  };

  if (typeof fish !== "undefined" && fish !== null) {
    if (typeof cats !== "undefined" && cats !== null) {
      if ((_ref = cats['Tom']) != null) {
        if (typeof _ref.eat === "function") {
          _ref.eat();
        }
      }
    }
  }

  teamer = ['gordon', 'messi', 'xavi', 'pique', 'puyol'];

  console.log(teamer[0]);

  console.log(teamer['0']);

  console.log(teamer[(function() {
    return "0";
  })()]);

  console.log(teamer[{
    toString: function() {
      return "0";
    }
  }]);

  console.log([1, 2, 3, 4, 5]);

  console.log([1, 2, 3, 4]);

  console.log([5, 4, 3, 2, 1]);

  console.log(teamer.slice(0, 3));

  console.log(teamer.slice(0, 4));

  console.log(teamer.slice(0, 3));

  console.log(teamer.slice(1));

  console.log(teamer.slice(1));

  for (key in father) {
    val = father[key];
    if (typeof val !== 'object') {
      console.log(key + ' - ' + val);
    }
  }

  for (val = _j = 0; _j <= 10; val = _j += 2) {
    console.log(val);
  }

  for (val = _k = 0.1; _k < 1.0; val = _k += 0.1) {
    console.log(val);
  }

  if (typeof exist !== "undefined" && exist !== null) {
    isOk = true;
  }

  if (typeof exist === "undefined" || exist === null) {
    isOk = false;
  }

  if (isOk == null) {
    isOk = exist;
  }

  console.log(isOk);

  array1 = ['a', 'b', 'c', 'd'];

  console.log(array1);

  console.log.apply(console, array1);

  console.log(array1.join(', '));

  array2 = [array1, 'f'];

  console.log(array2);

  (function() {
    return console.log('closure');
  })();

  (function(i) {
    return console.log('closure');
  })(i);

  (function(_this) {
    return (function() {
      return console.log('closure this');
    });
  })(this);

  tt = {};

  (function(name) {
    return this.name = name;
  }).call(tt, 'jim');

  console.log(tt.name);

}).call(this);
