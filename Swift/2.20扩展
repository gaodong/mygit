扩展
	向一个已有的类中增加功能 和 oc中的分类相似

	Swift 中的扩展可以：

	添加计算型属性和计算静态属性
	定义实例方法和类型方法
	提供新的构造器
	定义下标
	定义和使用新的嵌套类型
	使一个已有类型符合某个协议

	语法 extension SomeType {

	}

	扩展某个类型，适应协议

	extension SomeType:SomeProtocol, AnnotherProtocol {

	}

	1.扩展计算型属性

	extension Double {
		var km:Double {
			return self * 1_000.0
		}
	}
	let val = 12.5.km

	2.构造器
	class Person {
		var name:String
		init(name:String) {
			self.name = name
		}
	}

	struct Position {
		var x:Double = 0.0
		var y:Double = 0.0
	}

	extension Person {
		init() {
			self.init(name:"gordon")
		}
	}

	extension Position {
		init() {
			self.init(x:1.0, y:1.0)
		}
	}

	3. 扩展方法

	extension Int {
		func repeat(task:()->()) {
			for i in 0..self {
				task()
			}
		}
	}

	注:单参数 task:()->() 表示一个方法，无参数，无返回值类型

	let val = 3
	6.repeat({
		println(...)
	})
	//...

	4. 修改原始方法

	extension Int {
		mutating func square() {
			self = self*self
		}
	}

	let val = 3
	val.square()

	5. 下标

	extension Int {
		subscript(index:Int) {
			var temp = 1
			for _ in 1...index {
				temp *= 10
			}
			return (self / temp) % 10
		}
	}

	12345[0] // 5
	12345[1] // 4
	12345[2] // 3

	6.嵌套类型
	// 判断当前是否是元音
	extension Character {
	    enum Kind {
	        case Vowel, Consonant, Other
	    }
	    var kind: Kind {
	        switch String(self).lowercaseString {
	        case "a", "e", "i", "o", "u":
	            return .Vowel
	        case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m",
	             "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":
	            return .Consonant
	        default:
	            return .Other
	        }
	    }
	}

	


