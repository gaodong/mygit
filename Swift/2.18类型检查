类型检查
	父类 MediaItem
	子类 Movie, Song

	if movie is Movie / song is Song

	类型检查操作符 is
	类型转型操作符 as / as?

	var items = [
		Movie(...)
		Song(...)
		Movie(...)
		Song(...)
	]

	for item in items {
		if let movie = item as? Movie {
			... movie.name
		} else if let song = item as? Song {
			... song.name
		}
	}


	Any & AnyObject

	不确定类型可使用 Any
	AnyObject可代表任何class实例

	AnyObject

	let someObjs:AnyObject[] = [
		Movie(...)
		Movie(...)
		Movie(...)
	]

	for item in someObjs {
		if let movie = item as? Movie {
			... movie.name
		}
	}
	或
	for item in someObjs as? Movie[] {
		... movie.name
	}

	Any

	var things = Any[]()

	things.append(0)
	things.append(0.0)
	things.append(42)
	things.append(3.14159)
	things.append("hello")
	things.append((3.0, 5.0))
	things.append(Movie(name: "Ghostbusters", director: "Ivan Reitman"))

	for thing in things {
	    switch thing {
	    case 0 as Int:
	        println("zero as an Int")
	    case 0 as Double:
	        println("zero as a Double")
	    case let someInt as Int:
	        println("an integer value of \(someInt)")
	    case let someDouble as Double where someDouble > 0:
	        println("a positive double value of \(someDouble)")
	    case is Double:
	        println("some other double value that I don't want to print")
	    case let someString as String:
	        println("a string value of \"\(someString)\"")
	    case let (x, y) as (Double, Double):
	        println("an (x, y) point at \(x), \(y)")
	    case let movie as Movie:
	        println("a movie called '\(movie.name)', dir. \(movie.director)")
	    default:
	        println("something else")
	    }
	}

	在一个switch语句的case中使用强制形式的类型转换操作符（as, 而不是 as?）来检查和转换到一个明确的类型。在 switch case 语句的内容中这种检查总是安全的