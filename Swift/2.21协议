协议
	基本语法
	协议定义:
	protocol SomeProtocol {

	}
	协议实现:
	struct SomeStructure : SomeProtocol {

	}

	class SomeType : SomeProtocol {

	}

	委托

	protocol Process {

		var orignization:String { get }

		func start(connector:Connector)

		func send(connector:Connector, data:String)

		func end(connector:Connector)
	}

	protocol Connector {

		func init(process:Process)
		func send(data:String)
		func close(process:Process)
	}

	class UnionPayConnector:Connector {
		var name:String
		var url:String
		init(spName:String, url:String) {
			self.name = spName
			self.url = url
		}
		func init(process:Process) {
			println("开始向\"\(process.orignization)\"发送数据")
		}
		func send(data:String) {
			println("开始向\"\(url)\"发送:\(data)")
		}
		func close(process:Process) {
			println("发送结束，关闭连接")
		}
	}


	class UnionPayProcessor: Process {
		var orignization:String
		init(orignization:String) {
			self.orignization = orignization
		}
		var delegate:Connector?
		func start(connector:Connector) {
			connector.init(self)
		}

		func send(connector:Connector, data:String) {
			connector.send(data)
		}

		func end(connector:Connector) {
			connector.close(self)
		}

		func start() {
			start(delegate)
			end(delegate, "1234")
			end(delegate)
		}
	}

	var unionPayProcessor = UnionPayProcessor("银联")
	var unionPayConnector = UnionPayConnector("银联地址", "http://1.2.3.4")
	unionPayProcessor.delegate = unionPayConnector
	unionPayProcessor.start()

	在扩展中添加协议

	extension SomeType: SomeProtocol {
		func anyfunc() ... {
			...
		}
	}

	通过扩展补充协议声明

	struct Hamster {
		var name:String
		func asText() -> String {
			return "..."
		}
	}

	protocol AnyProtocol {
		func asText() -> String
	}

	补充协议: extension Hamster:AnyProtocol {}

	协议的继承

	protocol First:SecondProtocol, ThridProtocol {
		...
	}

	协议合成

	protocol One {
		...
	}

	protocol Two {
		...
	}

	class ObjDemo:One, Two {
		...
	}

	func exec(arg:protocol<One, Two>) {
		...
	}


	可选协议

	@objc protocol hasArea {
		...
	}

	


